/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __NEMO_FREEDESKTOP_GENERATED_H__
#define __NEMO_FREEDESKTOP_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.FileManager1 */

#define NEMO_FREEDESKTOP_TYPE_FILE_MANAGER1 (nemo_freedesktop_file_manager1_get_type ())
#define NEMO_FREEDESKTOP_FILE_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEMO_FREEDESKTOP_TYPE_FILE_MANAGER1, NemoFreedesktopFileManager1))
#define NEMO_FREEDESKTOP_IS_FILE_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEMO_FREEDESKTOP_TYPE_FILE_MANAGER1))
#define NEMO_FREEDESKTOP_FILE_MANAGER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NEMO_FREEDESKTOP_TYPE_FILE_MANAGER1, NemoFreedesktopFileManager1Iface))

struct _NemoFreedesktopFileManager1;
typedef struct _NemoFreedesktopFileManager1 NemoFreedesktopFileManager1;
typedef struct _NemoFreedesktopFileManager1Iface NemoFreedesktopFileManager1Iface;

struct _NemoFreedesktopFileManager1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_show_folders) (
    NemoFreedesktopFileManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId);

  gboolean (*handle_show_item_properties) (
    NemoFreedesktopFileManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId);

  gboolean (*handle_show_items) (
    NemoFreedesktopFileManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId);

  const gchar *const * (*get_open_locations) (NemoFreedesktopFileManager1 *object);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NemoFreedesktopFileManager1, g_object_unref)
#endif

GType nemo_freedesktop_file_manager1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nemo_freedesktop_file_manager1_interface_info (void);
guint nemo_freedesktop_file_manager1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void nemo_freedesktop_file_manager1_complete_show_folders (
    NemoFreedesktopFileManager1 *object,
    GDBusMethodInvocation *invocation);

void nemo_freedesktop_file_manager1_complete_show_items (
    NemoFreedesktopFileManager1 *object,
    GDBusMethodInvocation *invocation);

void nemo_freedesktop_file_manager1_complete_show_item_properties (
    NemoFreedesktopFileManager1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void nemo_freedesktop_file_manager1_call_show_folders (
    NemoFreedesktopFileManager1 *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nemo_freedesktop_file_manager1_call_show_folders_finish (
    NemoFreedesktopFileManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nemo_freedesktop_file_manager1_call_show_folders_sync (
    NemoFreedesktopFileManager1 *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GError **error);

void nemo_freedesktop_file_manager1_call_show_items (
    NemoFreedesktopFileManager1 *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nemo_freedesktop_file_manager1_call_show_items_finish (
    NemoFreedesktopFileManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nemo_freedesktop_file_manager1_call_show_items_sync (
    NemoFreedesktopFileManager1 *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GError **error);

void nemo_freedesktop_file_manager1_call_show_item_properties (
    NemoFreedesktopFileManager1 *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nemo_freedesktop_file_manager1_call_show_item_properties_finish (
    NemoFreedesktopFileManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nemo_freedesktop_file_manager1_call_show_item_properties_sync (
    NemoFreedesktopFileManager1 *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *const *nemo_freedesktop_file_manager1_get_open_locations (NemoFreedesktopFileManager1 *object);
gchar **nemo_freedesktop_file_manager1_dup_open_locations (NemoFreedesktopFileManager1 *object);
void nemo_freedesktop_file_manager1_set_open_locations (NemoFreedesktopFileManager1 *object, const gchar *const *value);


/* ---- */

#define NEMO_FREEDESKTOP_TYPE_FILE_MANAGER1_PROXY (nemo_freedesktop_file_manager1_proxy_get_type ())
#define NEMO_FREEDESKTOP_FILE_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEMO_FREEDESKTOP_TYPE_FILE_MANAGER1_PROXY, NemoFreedesktopFileManager1Proxy))
#define NEMO_FREEDESKTOP_FILE_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEMO_FREEDESKTOP_TYPE_FILE_MANAGER1_PROXY, NemoFreedesktopFileManager1ProxyClass))
#define NEMO_FREEDESKTOP_FILE_MANAGER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEMO_FREEDESKTOP_TYPE_FILE_MANAGER1_PROXY, NemoFreedesktopFileManager1ProxyClass))
#define NEMO_FREEDESKTOP_IS_FILE_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEMO_FREEDESKTOP_TYPE_FILE_MANAGER1_PROXY))
#define NEMO_FREEDESKTOP_IS_FILE_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEMO_FREEDESKTOP_TYPE_FILE_MANAGER1_PROXY))

typedef struct _NemoFreedesktopFileManager1Proxy NemoFreedesktopFileManager1Proxy;
typedef struct _NemoFreedesktopFileManager1ProxyClass NemoFreedesktopFileManager1ProxyClass;
typedef struct _NemoFreedesktopFileManager1ProxyPrivate NemoFreedesktopFileManager1ProxyPrivate;

struct _NemoFreedesktopFileManager1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NemoFreedesktopFileManager1ProxyPrivate *priv;
};

struct _NemoFreedesktopFileManager1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType nemo_freedesktop_file_manager1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NemoFreedesktopFileManager1Proxy, g_object_unref)
#endif

void nemo_freedesktop_file_manager1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NemoFreedesktopFileManager1 *nemo_freedesktop_file_manager1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NemoFreedesktopFileManager1 *nemo_freedesktop_file_manager1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nemo_freedesktop_file_manager1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NemoFreedesktopFileManager1 *nemo_freedesktop_file_manager1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NemoFreedesktopFileManager1 *nemo_freedesktop_file_manager1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NEMO_FREEDESKTOP_TYPE_FILE_MANAGER1_SKELETON (nemo_freedesktop_file_manager1_skeleton_get_type ())
#define NEMO_FREEDESKTOP_FILE_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEMO_FREEDESKTOP_TYPE_FILE_MANAGER1_SKELETON, NemoFreedesktopFileManager1Skeleton))
#define NEMO_FREEDESKTOP_FILE_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEMO_FREEDESKTOP_TYPE_FILE_MANAGER1_SKELETON, NemoFreedesktopFileManager1SkeletonClass))
#define NEMO_FREEDESKTOP_FILE_MANAGER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEMO_FREEDESKTOP_TYPE_FILE_MANAGER1_SKELETON, NemoFreedesktopFileManager1SkeletonClass))
#define NEMO_FREEDESKTOP_IS_FILE_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEMO_FREEDESKTOP_TYPE_FILE_MANAGER1_SKELETON))
#define NEMO_FREEDESKTOP_IS_FILE_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEMO_FREEDESKTOP_TYPE_FILE_MANAGER1_SKELETON))

typedef struct _NemoFreedesktopFileManager1Skeleton NemoFreedesktopFileManager1Skeleton;
typedef struct _NemoFreedesktopFileManager1SkeletonClass NemoFreedesktopFileManager1SkeletonClass;
typedef struct _NemoFreedesktopFileManager1SkeletonPrivate NemoFreedesktopFileManager1SkeletonPrivate;

struct _NemoFreedesktopFileManager1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NemoFreedesktopFileManager1SkeletonPrivate *priv;
};

struct _NemoFreedesktopFileManager1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nemo_freedesktop_file_manager1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NemoFreedesktopFileManager1Skeleton, g_object_unref)
#endif

NemoFreedesktopFileManager1 *nemo_freedesktop_file_manager1_skeleton_new (void);


/* ---- */

#define NEMO_FREEDESKTOP_TYPE_OBJECT (nemo_freedesktop_object_get_type ())
#define NEMO_FREEDESKTOP_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEMO_FREEDESKTOP_TYPE_OBJECT, NemoFreedesktopObject))
#define NEMO_FREEDESKTOP_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEMO_FREEDESKTOP_TYPE_OBJECT))
#define NEMO_FREEDESKTOP_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NEMO_FREEDESKTOP_TYPE_OBJECT, NemoFreedesktopObject))

struct _NemoFreedesktopObject;
typedef struct _NemoFreedesktopObject NemoFreedesktopObject;
typedef struct _NemoFreedesktopObjectIface NemoFreedesktopObjectIface;

struct _NemoFreedesktopObjectIface
{
  GTypeInterface parent_iface;
};

GType nemo_freedesktop_object_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NemoFreedesktopObject, g_object_unref)
#endif

NemoFreedesktopFileManager1 *nemo_freedesktop_object_get_file_manager1 (NemoFreedesktopObject *object);
NemoFreedesktopFileManager1 *nemo_freedesktop_object_peek_file_manager1 (NemoFreedesktopObject *object);

#define NEMO_FREEDESKTOP_TYPE_OBJECT_PROXY (nemo_freedesktop_object_proxy_get_type ())
#define NEMO_FREEDESKTOP_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEMO_FREEDESKTOP_TYPE_OBJECT_PROXY, NemoFreedesktopObjectProxy))
#define NEMO_FREEDESKTOP_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEMO_FREEDESKTOP_TYPE_OBJECT_PROXY, NemoFreedesktopObjectProxyClass))
#define NEMO_FREEDESKTOP_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEMO_FREEDESKTOP_TYPE_OBJECT_PROXY, NemoFreedesktopObjectProxyClass))
#define NEMO_FREEDESKTOP_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEMO_FREEDESKTOP_TYPE_OBJECT_PROXY))
#define NEMO_FREEDESKTOP_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEMO_FREEDESKTOP_TYPE_OBJECT_PROXY))

typedef struct _NemoFreedesktopObjectProxy NemoFreedesktopObjectProxy;
typedef struct _NemoFreedesktopObjectProxyClass NemoFreedesktopObjectProxyClass;
typedef struct _NemoFreedesktopObjectProxyPrivate NemoFreedesktopObjectProxyPrivate;

struct _NemoFreedesktopObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  NemoFreedesktopObjectProxyPrivate *priv;
};

struct _NemoFreedesktopObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType nemo_freedesktop_object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NemoFreedesktopObjectProxy, g_object_unref)
#endif

NemoFreedesktopObjectProxy *nemo_freedesktop_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define NEMO_FREEDESKTOP_TYPE_OBJECT_SKELETON (nemo_freedesktop_object_skeleton_get_type ())
#define NEMO_FREEDESKTOP_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEMO_FREEDESKTOP_TYPE_OBJECT_SKELETON, NemoFreedesktopObjectSkeleton))
#define NEMO_FREEDESKTOP_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEMO_FREEDESKTOP_TYPE_OBJECT_SKELETON, NemoFreedesktopObjectSkeletonClass))
#define NEMO_FREEDESKTOP_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEMO_FREEDESKTOP_TYPE_OBJECT_SKELETON, NemoFreedesktopObjectSkeletonClass))
#define NEMO_FREEDESKTOP_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEMO_FREEDESKTOP_TYPE_OBJECT_SKELETON))
#define NEMO_FREEDESKTOP_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEMO_FREEDESKTOP_TYPE_OBJECT_SKELETON))

typedef struct _NemoFreedesktopObjectSkeleton NemoFreedesktopObjectSkeleton;
typedef struct _NemoFreedesktopObjectSkeletonClass NemoFreedesktopObjectSkeletonClass;
typedef struct _NemoFreedesktopObjectSkeletonPrivate NemoFreedesktopObjectSkeletonPrivate;

struct _NemoFreedesktopObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  NemoFreedesktopObjectSkeletonPrivate *priv;
};

struct _NemoFreedesktopObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType nemo_freedesktop_object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NemoFreedesktopObjectSkeleton, g_object_unref)
#endif

NemoFreedesktopObjectSkeleton *nemo_freedesktop_object_skeleton_new (const gchar *object_path);
void nemo_freedesktop_object_skeleton_set_file_manager1 (NemoFreedesktopObjectSkeleton *object, NemoFreedesktopFileManager1 *interface_);

/* ---- */

#define NEMO_FREEDESKTOP_TYPE_OBJECT_MANAGER_CLIENT (nemo_freedesktop_object_manager_client_get_type ())
#define NEMO_FREEDESKTOP_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEMO_FREEDESKTOP_TYPE_OBJECT_MANAGER_CLIENT, NemoFreedesktopObjectManagerClient))
#define NEMO_FREEDESKTOP_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEMO_FREEDESKTOP_TYPE_OBJECT_MANAGER_CLIENT, NemoFreedesktopObjectManagerClientClass))
#define NEMO_FREEDESKTOP_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEMO_FREEDESKTOP_TYPE_OBJECT_MANAGER_CLIENT, NemoFreedesktopObjectManagerClientClass))
#define NEMO_FREEDESKTOP_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEMO_FREEDESKTOP_TYPE_OBJECT_MANAGER_CLIENT))
#define NEMO_FREEDESKTOP_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEMO_FREEDESKTOP_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _NemoFreedesktopObjectManagerClient NemoFreedesktopObjectManagerClient;
typedef struct _NemoFreedesktopObjectManagerClientClass NemoFreedesktopObjectManagerClientClass;
typedef struct _NemoFreedesktopObjectManagerClientPrivate NemoFreedesktopObjectManagerClientPrivate;

struct _NemoFreedesktopObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  NemoFreedesktopObjectManagerClientPrivate *priv;
};

struct _NemoFreedesktopObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NemoFreedesktopObjectManagerClient, g_object_unref)
#endif

GType nemo_freedesktop_object_manager_client_get_type (void) G_GNUC_CONST;

GType nemo_freedesktop_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void nemo_freedesktop_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *nemo_freedesktop_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *nemo_freedesktop_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void nemo_freedesktop_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *nemo_freedesktop_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *nemo_freedesktop_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __NEMO_FREEDESKTOP_GENERATED_H__ */
